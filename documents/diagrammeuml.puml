@startuml

	abstract AServer {
		+receive() : String
	}

abstract AClient {
	+connect(ip : String, port : int)
	+disconnect()
	+send(json : String)
}

together {
	class PluginManager {
		+add(plugin : IPlugin)
		+remove(pluginName : String)
		+load(dirName : String)
		+getByName(pluginName : String) : IPlugin
		+checkHeartBeat(plugin: APluginMaster) : Boolean
	}

	together {

	enum OSAvailable {
		WINDOWS
		LINUX
	}
		interface IPlugin {
			+DoWorkWindows()	
			+DoWorkLinux()	
		}

		abstract APluginMaster {
			-heartbeat : Integer
			-name : String 
			-activated : Boolean
			-lastExec : Integer

			+getHearthbeat()
			+getName()
			+getActivated()
			+getOsCompatible()
			+getLastExec() : Integer

			+async execute() : async String
		}
		note bottom: lastExec correspond au temps en secondes depuis la dernière exécution

		class PluginComposite {
			+async execute() : async String
			+add(plugin : IPlugin)
			+remove(pluginName : String)
			+getChildren()
		}

		class PluginLeaf {
			+async execute() : async String
		}
	}	
}


together {
	enum PluginDownloadedMark {
		DELETED
		UPDATED
		NEW
	}

	interface IPluginPersistance {
		+load() : Dict<IPlugin, String>
		+save(plugins : Dict<IPlugin, String>)

		+update()
		+delete()
	}

	class PluginPersistanceDisk {
		+load() : Dict<IPlugin, String>
		+save(plugins : Dict<IPlugin, String>)

		+update()
		+delete()
	}

	class PluginChecker {
		-server : IServer
		+validatePlugin() : Dict<IPlugin, PluginDownloadedMark>
	}
	note right: 	validatePlugin permet de dire si un plugin est nouveau, mit à jour ou effacé sur le serveur
	interface IPluginDownloader {
		-server : IServer
	}
}
together {
	interface IEncryptionMethod {
		+crypt(string : String, key : Integer) : String 
		+decrypt(string : String, key : Integer) : String
	}

	class EncryptionRSA {
		+crypt(string : String, key : Integer) : String 
		+decrypt(string : String, key : Integer) : String
	}
}

IPluginDownloader .. AClient : pluginDownloader
IEncryptionMethod .. AClient : encryptionMethod 

PluginChecker <-- IPluginDownloader : +downloader

IEncryptionMethod <|.. EncryptionRSA

PluginManager <-- AServer
PluginManager *-- APluginMaster : +List<IPluginMaster> plugins

IPlugin <.. APluginMaster : +plugin
IPlugin <|.. PluginComposite
IPlugin <|.. PluginLeaf

PluginComposite *-- IPlugin : +children

PluginManager <-- AClient : List<IPluginMaster>

PluginPersistanceDisk <|.. IPluginPersistance
IPluginPersistance <.. IPluginDownloader

OSAvailable .. APluginMaster : osCompatibles
@enduml
