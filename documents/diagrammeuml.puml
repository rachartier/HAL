@startuml

	abstract AServer {
		+receive() : String
	}

abstract AClient {
	+connect(ip : String, port : int)
	+disconnect()
	+send(json : String)
}

together {
	class PluginManager {
		+add(plugin : IPlugin)
		+remove(pluginName : String)
		+load(dirName : String)
		+getByName(pluginName : String) : IPlugin
		+checkHeartBeat(plugin: APluginMaster) : Boolean
	}

	together {

	enum OSAvailable {
		WINDOWS
		LINUX
	}
		interface IPlugin {
			+DoWorkWindows()	
			+DoWorkLinux()	
		}

		abstract APluginMaster {
			-heartbeat : Integer
			-name : String 
			-activated : Boolean
			-lastExec : Integer

			+getHearthbeat()
			+getName()
			+getActivated()
			+getOsCompatible()
			+getLastExec() : Integer

			+async execute() : async String
		}
		note left: lastExec correspond au temps en secondes depuis la dernière exécution

		class PluginComposite {
			+async execute() : async String
			+add(plugin : IPlugin)
			+remove(pluginName : String)
			+getChildren()
		}

		class PluginLeaf {
			+async execute() : async String
		}
	}	
}

interface IPluginDownloader {
	-server : IServer
	+async download(name : String) : IPlugin
	+async download(names : List<String>) : List<IPlugin>
}

interface IPluginChecker {
	-server : IServer
	+validatePlugin() : List<String>
}
note left: validePlugin renvois une liste de plugin non connus du client

together {
	interface IEncryptionMethod {
		+crypt(string : String, key : Integer) : String 
		+decrypt(string : String, key : Integer) : String
	}

	class EncryptionRSA {
		+crypt(string : String, key : Integer) : String 
		+decrypt(string : String, key : Integer) : String
	}
}

IPluginDownloader .. AClient : pluginDownloader
IEncryptionMethod .. AClient : encryptionMethod 

IPluginChecker <.. IPluginDownloader : +downloader

IEncryptionMethod <|.. EncryptionRSA

PluginManager <-- AServer
PluginManager *.. APluginMaster : +List<IPluginMaster> plugins

IPlugin <.. APluginMaster : +plugin
IPlugin <|.. PluginComposite
IPlugin <|.. PluginLeaf

PluginComposite *.. IPlugin : +children

PluginManager <-- AClient : List<IPluginMaster>

OSAvailable .. APluginMaster : osCompatibles
@enduml
